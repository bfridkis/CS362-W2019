        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:28
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include "cardEffects.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
  2689549:    9:int compare(const void* a, const void* b) {
  2689549:   10:  if (*(int*)a > *(int*)b)
  1250772:   11:    return 1;
  1438777:   12:  if (*(int*)a < *(int*)b)
   539920:   13:    return -1;
   898857:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
     3268:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
     3268:   45:  SelectStream(1);
     3268:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
     3268:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
     3268:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
     9562:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
    89189:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
    82895:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
     3081:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
      187:   74:  if (numPlayers == 2)
        -:   75:    {
      179:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
        8:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
        8:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
      187:   88:  if (numPlayers == 2)
        -:   89:    {
      179:   90:      state->supplyCount[estate] = 8;
      179:   91:      state->supplyCount[duchy] = 8;
      179:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
        8:   96:      state->supplyCount[estate] = 12;
        8:   97:      state->supplyCount[duchy] = 12;
        8:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
      187:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      187:  103:  state->supplyCount[silver] = 40;
      187:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
     3927:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
    30855:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
    28985:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
     1870:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
      366:  116:		  if (numPlayers == 2){ 
      174:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
        9:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
     1687:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
     1870:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
    27115:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
      577:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
      390:  141:      state->deckCount[i] = 0;
     1560:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
     1170:  144:	  state->deck[i][j] = estate;
     1170:  145:	  state->deckCount[i]++;
        -:  146:	}
     3120:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
     2730:  149:	  state->deck[i][j] = copper;
     2730:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
      577:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
      390:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
      577:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
      390:  167:      state->handCount[i] = 0;
      390:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
     5236:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
     5049:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
      187:  183:  state->outpostPlayed = 0;
      187:  184:  state->phase = 0;
      187:  185:  state->numActions = 1;
      187:  186:  state->numBuys = 1;
      187:  187:  state->playedCardCount = 0;
      187:  188:  state->whoseTurn = 0;
      187:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
     1122:  193:  for (it = 0; it < 5; it++){
      935:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
      187:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
      187:  199:  return 0;
        -:  200:}
        -:  201:
     3112:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
     3112:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
     3112:  210:  if (state->deckCount[player] < 1)
     1106:  211:    return -1;
     2006:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
   411010:  215:  while (state->deckCount[player] > 0) {
   406998:  216:    card = floor(Random() * state->deckCount[player]);
   406998:  217:    newDeck[newDeckPos] = state->deck[player][card];
   406998:  218:    newDeckPos++;
 33553578:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
 33146580:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
   406998:  222:    state->deckCount[player]--;
        -:  223:  }
   409004:  224:  for (i = 0; i < newDeckPos; i++) {
   406998:  225:    state->deck[player][i] = newDeck[i];
   406998:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
     2006:  229:  return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
    #####:  270:  return 0;
        -:  271:}
        -:  272:
      480:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
      480:  281:  who = state->whoseTurn;
        -:  282:
      480:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
       40:  286:    return -1;
      440:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
      440:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       40:  294:    return -1;
        -:  295:  } else {
      400:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
      400:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
      400:  300:    state->coins = (state->coins) - (getCost(supplyPos));
      400:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
      400:  309:  return 0;
        -:  310:}
        -:  311:
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
     1488:  321:int supplyCount(int card, struct gameState *state) {
     1488:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
     1232:  347:int whoseTurn(struct gameState *state) {
     1232:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
    #####:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
    #####:  407:	  j++;
        -:  408:	}
        -:  409:    }
    #####:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
        -:  416:}
        -:  417:
    #####:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
     8669:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
     8669:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
      156:  534:    for (i = 0; i < state->discardCount[player];i++){
    #####:  535:      state->deck[player][i] = state->discard[player][i];
    #####:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
      156:  539:    state->deckCount[player] = state->discardCount[player];
      156:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
      156:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
      156:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
      156:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
      156:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
      156:  560:    if (deckCounter == 0)
      156:  561:      return -1;
        -:  562:
    #####:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:    state->deckCount[player]--;
    #####:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
     8513:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
     8513:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
     8513:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     8513:  577:    state->deckCount[player]--;
     8513:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
     8513:  581:  return 0;
        -:  582:}
        -:  583:
      840:  584:int getCost(int cardNumber)
        -:  585:{
      840:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
       84:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
       84:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
       84:  615:      return 4;
        -:  616:    case village:
       84:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
       84:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
       84:  627:      return 5;
        -:  628:    case ambassador:
       84:  629:      return 3;
        -:  630:    case cutpurse:
       84:  631:      return 4;
        -:  632:    case embargo: 
       84:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
       84:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
     1232:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:	
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int x;
        -:  653:  int index;
     1232:  654:  int currentPlayer = whoseTurn(state);
     1232:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:  
     1232:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
     1232:  659:  if (nextPlayer > (state->numPlayers - 1)){
        1:  660:	nextPlayer = 0;
        -:  661:  }
        -:  662:  
        -:  663:  //uses switch to select card and perform actions 
     1232:  664:  switch( card ) 
        -:  665:	{
        -:  666:	case adventurer:
      618:  667:	  return adventurerEffect(currentPlayer, state);
        -:  668:			
        -:  669:	case council_room:
        -:  670:	  //+4 Cards
    #####:  671:	  for (i = 0; i < 4; i++)
        -:  672:	{
    #####:  673:	  drawCard(currentPlayer, state);
        -:  674:	}
        -:  675:			
        -:  676:	  //+1 Buy
    #####:  677:	  state->numBuys++;
        -:  678:			
        -:  679:	  //Each other player draws a card
    #####:  680:	  for (i = 0; i < state->numPlayers; i++)
        -:  681:	{
    #####:  682:	  if ( i != currentPlayer )
        -:  683:		{
    #####:  684:		  drawCard(i, state);
        -:  685:		}
        -:  686:	}
        -:  687:			
        -:  688:	  //put played card in played card pile
    #####:  689:	  discardCard(handPos, currentPlayer, state, 0);
        -:  690:			
    #####:  691:	  return 0;
        -:  692:			
        -:  693:	case feast:
        -:  694:	  //gain card with cost up to 5
        -:  695:	  //Backup hand
    #####:  696:	  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:	  }
        -:  700:	  //Backup hand
        -:  701:
        -:  702:	  //Update Coins for Buy
    #####:  703:	  updateCoins(currentPlayer, state, 5);
    #####:  704:	  x = 1;//Condition to loop on
    #####:  705:	  while( x == 1) {//Buy one card
    #####:  706:	if (supplyCount(choice1, state) <= 0){
        -:  707:	  if (DEBUG)
        -:  708:		printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:		printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
    #####:  715:	  printf("That card is too expensive!\n");
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:		printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:	  }     
        -:  736:
        -:  737:	  //Reset Hand
    #####:  738:	  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:	  }
        -:  742:	  //Reset Hand
        -:  743:				
    #####:  744:	  return 0;
        -:  745:			
        -:  746:	case gardens:
    #####:  747:	  return -1;
        -:  748:			
        -:  749:	case mine:
    #####:  750:	  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:	  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:	  if (choice2 > treasure_map || choice2 < curse)
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:	  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:	  gainCard(choice2, state, 2, currentPlayer);
        -:  768:
        -:  769:	  //discard card from hand
    #####:  770:	  discardCard(handPos, currentPlayer, state, 0);
        -:  771:
        -:  772:	  //discard trashed card
    #####:  773:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
        -:  776:		{
    #####:  777:		  discardCard(i, currentPlayer, state, 0);			
    #####:  778:		  break;
        -:  779:		}
        -:  780:	}
        -:  781:			
    #####:  782:	  return 0;
        -:  783:			
        -:  784:	case remodel:
    #####:  785:	  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  786:
    #####:  787:	  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:	  gainCard(choice2, state, 0, currentPlayer);
        -:  793:
        -:  794:	  //discard card from hand
    #####:  795:	  discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:	  //discard trashed card
    #####:  798:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
        -:  801:		{
    #####:  802:		  discardCard(i, currentPlayer, state, 0);			
    #####:  803:		  break;
        -:  804:		}
        -:  805:	}
        -:  806:
        -:  807:
    #####:  808:	  return 0;
        -:  809:		
        -:  810:	case smithy:
      412:  811:	  return smithyEffect(currentPlayer, state, handPos);
        -:  812:		
        -:  813:	case village:
        -:  814:	  //+1 Card
    #####:  815:	  drawCard(currentPlayer, state);
        -:  816:			
        -:  817:	  //+2 Actions
    #####:  818:	  state->numActions = state->numActions + 2;
        -:  819:			
        -:  820:	  //discard played card from hand
    #####:  821:	  discardCard(handPos, currentPlayer, state, 0);
    #####:  822:	  return 0;
        -:  823:		
        -:  824:	case baron:
    #####:  825:	  state->numBuys++;//Increase buys by 1!
    #####:  826:	  if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  827:	int p = 0;//Iterator for hand!
    #####:  828:	int card_not_discarded = 1;//Flag for discard set!
    #####:  829:	while(card_not_discarded){
    #####:  830:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  831:		state->coins += 4;//Add 4 coins to the amount of coins
    #####:  832:		state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  833:		state->discardCount[currentPlayer]++;
    #####:  834:		for (;p < state->handCount[currentPlayer]; p++){
    #####:  835:		  state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  836:		}
    #####:  837:		state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  838:		state->handCount[currentPlayer]--;
    #####:  839:		card_not_discarded = 0;//Exit the loop
        -:  840:	  }
    #####:  841:	  else if (p > state->handCount[currentPlayer]){
        -:  842:		if(DEBUG) {
        -:  843:		  printf("No estate cards in your hand, invalid choice\n");
        -:  844:		  printf("Must gain an estate if there are any\n");
        -:  845:		}
    #####:  846:		if (supplyCount(estate, state) > 0){
    #####:  847:		  gainCard(estate, state, 0, currentPlayer);
    #####:  848:		  state->supplyCount[estate]--;//Decrement estates
    #####:  849:		  if (supplyCount(estate, state) == 0){
    #####:  850:		isGameOver(state);
        -:  851:		  }
        -:  852:		}
    #####:  853:		card_not_discarded = 0;//Exit the loop
        -:  854:	  }
        -:  855:				
        -:  856:	  else{
    #####:  857:		p++;//Next card
        -:  858:	  }
        -:  859:	}
        -:  860:	  }
        -:  861:				
        -:  862:	  else{
    #####:  863:	if (supplyCount(estate, state) > 0){
    #####:  864:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  865:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  866:	  if (supplyCount(estate, state) == 0){
    #####:  867:		isGameOver(state);
        -:  868:	  }
        -:  869:	}
        -:  870:	  }
        -:  871:		
        -:  872:	  
    #####:  873:	  return 0;
        -:  874:		
        -:  875:	case great_hall:
        -:  876:	  //+1 Card
    #####:  877:	  drawCard(currentPlayer, state);
        -:  878:			
        -:  879:	  //+1 Actions
    #####:  880:	  state->numActions++;
        -:  881:			
        -:  882:	  //discard card from hand
    #####:  883:	  discardCard(handPos, currentPlayer, state, 0);
    #####:  884:	  return 0;
        -:  885:		
        -:  886:	case minion:
    #####:  887:	  return minionEffect(currentPlayer, state, choice1, choice2, handPos);
        -:  888:		
        -:  889:	case steward:
    #####:  890:	  if (choice1 == 1)
        -:  891:	{
        -:  892:	  //+2 cards
    #####:  893:	  drawCard(currentPlayer, state);
    #####:  894:	  drawCard(currentPlayer, state);
        -:  895:	}
    #####:  896:	  else if (choice1 == 2)
        -:  897:	{
        -:  898:	  //+2 coins
    #####:  899:	  state->coins = state->coins + 2;
        -:  900:	}
        -:  901:	  else
        -:  902:	{
        -:  903:	  //trash 2 cards in hand
    #####:  904:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  905:	  discardCard(choice3, currentPlayer, state, 1);
        -:  906:	}
        -:  907:			
        -:  908:	  //discard card from hand
    #####:  909:	  discardCard(handPos, currentPlayer, state, 0);
    #####:  910:	  return 0;
        -:  911:		
        -:  912:	case tribute:
    #####:  913:	  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  914:	if (state->deckCount[nextPlayer] > 0){
    #####:  915:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	  state->deckCount[nextPlayer]--;
        -:  917:	}
    #####:  918:	else if (state->discardCount[nextPlayer] > 0){
    #####:  919:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  920:	  state->discardCount[nextPlayer]--;
        -:  921:	}
        -:  922:	else{
        -:  923:	  //No Card to Reveal
        -:  924:	  if (DEBUG){
        -:  925:		printf("No cards to reveal\n");
        -:  926:	  }
        -:  927:	}
        -:  928:	  }
        -:  929:		
        -:  930:	  else{
    #####:  931:	if (state->deckCount[nextPlayer] == 0){
    #####:  932:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  933:		state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  934:		state->deckCount[nextPlayer]++;
    #####:  935:		state->discard[nextPlayer][i] = -1;
    #####:  936:		state->discardCount[nextPlayer]--;
        -:  937:	  }
        -:  938:				
    #####:  939:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  940:	} 
    #####:  941:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  943:	state->deckCount[nextPlayer]--;
    #####:  944:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  945:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  946:	state->deckCount[nextPlayer]--;
        -:  947:	  }    
        -:  948:			   
    #####:  949:	  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  950:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  951:	state->playedCardCount++;
    #####:  952:	tributeRevealedCards[1] = -1;
        -:  953:	  }
        -:  954:
    #####:  955:	  for (i = 0; i <= 2; i ++){
    #####:  956:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  957:	  state->coins += 2;
        -:  958:	}
        -:  959:			
    #####:  960:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  961:	  drawCard(currentPlayer, state);
    #####:  962:	  drawCard(currentPlayer, state);
        -:  963:	}
        -:  964:	else{//Action Card
    #####:  965:	  state->numActions = state->numActions + 2;
        -:  966:	}
        -:  967:	  }
        -:  968:		
    #####:  969:	  return 0;
        -:  970:		
        -:  971:	case ambassador:
    #####:  972:	  return ambassadorEffect(currentPlayer, state, choice1, choice2, handPos);
        -:  973:		
        -:  974:	case cutpurse:
      202:  975:		return cutpurseEffect(currentPlayer, state, handPos);
        -:  976:
        -:  977:	case embargo: 
        -:  978:	  //+2 Coins
    #####:  979:	  state->coins = state->coins + 2;
        -:  980:			
        -:  981:	  //see if selected pile is in play
    #####:  982:	  if ( state->supplyCount[choice1] == -1 )
        -:  983:	{
    #####:  984:	  return -1;
        -:  985:	}
        -:  986:			
        -:  987:	  //add embargo token to selected supply pile
    #####:  988:	  state->embargoTokens[choice1]++;
        -:  989:			
        -:  990:	  //trash card
    #####:  991:	  discardCard(handPos, currentPlayer, state, 1);		
    #####:  992:	  return 0;
        -:  993:		
        -:  994:	case outpost:
        -:  995:	  //set outpost flag
    #####:  996:	  state->outpostPlayed++;
        -:  997:			
        -:  998:	  //discard card
    #####:  999:	  discardCard(handPos, currentPlayer, state, 0);
    #####: 1000:	  return 0;
        -: 1001:		
        -: 1002:	case salvager:
        -: 1003:	  //+1 buy
    #####: 1004:	  state->numBuys++;
        -: 1005:			
    #####: 1006:	  if (choice1)
        -: 1007:	{
        -: 1008:	  //gain coins equal to trashed card
    #####: 1009:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1010:	  //trash card
    #####: 1011:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1012:	}
        -: 1013:			
        -: 1014:	  //discard card
    #####: 1015:	  discardCard(handPos, currentPlayer, state, 0);
    #####: 1016:	  return 0;
        -: 1017:		
        -: 1018:	case sea_hag:
    #####: 1019:	  for (i = 0; i < state->numPlayers; i++){
    #####: 1020:	if (i != currentPlayer){
    #####: 1021:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1022:	  state->discardCount[i]++;
    #####: 1023:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1024:	}
        -: 1025:	  }
    #####: 1026:	  return 0;
        -: 1027:		
        -: 1028:	case treasure_map:
        -: 1029:	  //search hand for another treasure_map
    #####: 1030:	  index = -1;
    #####: 1031:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1032:	{
    #####: 1033:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1034:		{
    #####: 1035:		  index = i;
    #####: 1036:		  break;
        -: 1037:		}
        -: 1038:	}
    #####: 1039:	  if (index > -1)
        -: 1040:	{
        -: 1041:	  //trash both treasure cards
    #####: 1042:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1043:	  discardCard(index, currentPlayer, state, 1);
        -: 1044:
        -: 1045:	  //gain 4 Gold cards
    #####: 1046:	  for (i = 0; i < 4; i++)
        -: 1047:		{
    #####: 1048:		  gainCard(gold, state, 1, currentPlayer);
        -: 1049:		}
        -: 1050:				
        -: 1051:	  //return success
    #####: 1052:	  return 1;
        -: 1053:	}
        -: 1054:			
        -: 1055:	  //no second treasure_map found in hand
    #####: 1056:	  return -1;
        -: 1057:	}
        -: 1058:	
    #####: 1059:  return -1;
        -: 1060:}
        -: 1061:
     1214: 1062:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1063:{
        -: 1064:	
        -: 1065:  //if card is not trashed, added to Played pile 
     1214: 1066:  if (trashFlag < 1)
        -: 1067:    {
        -: 1068:      //add card to played pile
     1214: 1069:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1214: 1070:      state->playedCardCount++;
        -: 1071:    }
        -: 1072:	
        -: 1073:  //set played card to -1
     1214: 1074:  state->hand[currentPlayer][handPos] = -1;
        -: 1075:	
        -: 1076:  //remove card from player's hand
     1214: 1077:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1078:    {
        -: 1079:      //reduce number of cards in hand
        4: 1080:      state->handCount[currentPlayer]--;
        -: 1081:    }
     1210: 1082:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1083:    {
        -: 1084:      //reduce number of cards in hand
    #####: 1085:      state->handCount[currentPlayer]--;
        -: 1086:    }
        -: 1087:  else 	
        -: 1088:    {
        -: 1089:      //replace discarded card with last card in hand
     1210: 1090:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1091:      //set last card to -1
     1210: 1092:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1093:      //reduce number of cards in hand
     1210: 1094:      state->handCount[currentPlayer]--;
        -: 1095:    }
        -: 1096:	
     1214: 1097:  return 0;
        -: 1098:}
        -: 1099:
     1048: 1100:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1101:{
        -: 1102:  //Note: supplyPos is enum of choosen card
        -: 1103:	
        -: 1104:  //check if supply pile is empty (0) or card is not used in game (-1)
     1048: 1105:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1106:    {
      444: 1107:      return -1;
        -: 1108:    }
        -: 1109:	
        -: 1110:  //added card for [whoseTurn] current player:
        -: 1111:  // toFlag = 0 : add to discard
        -: 1112:  // toFlag = 1 : add to deck
        -: 1113:  // toFlag = 2 : add to hand
        -: 1114:
      604: 1115:  if (toFlag == 1)
        -: 1116:    {
       68: 1117:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       68: 1118:      state->deckCount[player]++;
        -: 1119:    }
      536: 1120:  else if (toFlag == 2)
        -: 1121:    {
       68: 1122:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       68: 1123:      state->handCount[player]++;
        -: 1124:    }
        -: 1125:  else
        -: 1126:    {
      468: 1127:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      468: 1128:      state->discardCount[player]++;
        -: 1129:    }
        -: 1130:	
        -: 1131:  //decrease number in supply pile
      604: 1132:  state->supplyCount[supplyPos]--;
        -: 1133:	 
      604: 1134:  return 0;
        -: 1135:}
        -: 1136:
     1401: 1137:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1138:{
        -: 1139:  int i;
        -: 1140:	
        -: 1141:  //reset coin count
     1401: 1142:  state->coins = 0;
        -: 1143:
        -: 1144:  //add coins for each Treasure card in player's hand
   305034: 1145:  for (i = 0; i < state->handCount[player]; i++)
        -: 1146:    {
   303633: 1147:      if (state->hand[player][i] == copper)
        -: 1148:	{
   132186: 1149:	  state->coins += 1;
        -: 1150:	}
   171447: 1151:      else if (state->hand[player][i] == silver)
        -: 1152:	{
    66642: 1153:	  state->coins += 2;
        -: 1154:	}
   104805: 1155:      else if (state->hand[player][i] == gold)
        -: 1156:	{
    65468: 1157:	  state->coins += 3;
        -: 1158:	}	
        -: 1159:    }	
        -: 1160:
        -: 1161:  //add bonus
     1401: 1162:  state->coins += bonus;
        -: 1163:
     1401: 1164:  return 0;
        -: 1165:}
        -: 1166:
        -: 1167:
        -: 1168://end of dominion.c
        -: 1169:
